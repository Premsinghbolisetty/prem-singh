#include <stdio.h>
#include <stdlib.h>
struct Node 
{
    int data;
    struct Node* left;
    struct Node* right;
    int height;
};
struct StackNode 
{
    char operation; 
    int value;
    struct StackNode* next;
};
int height(struct Node* node) 
{
    if (node == NULL)
        return 0;
    return node->height;
}
int max(int a, int b) 
{
    return (a > b) ? a : b;
}
struct Node* newNode(int data) 
{
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->data = data;
    node->left = NULL;
    node->right = NULL;
    node->height = 1;
    return node;
}
struct Node* rightRotate(struct Node* y) 
{
    struct Node* x = y->left;
    struct Node* T2 = x->right;
    x->right = y;
    y->left = T2;
    y->height = 1 + max(height(y->left), height(y->right));
    x->height = 1 + max(height(x->left), height(x->right));
    return x;
}
struct Node* leftRotate(struct Node* x) 
{
    struct Node* y = x->right;
    struct Node* T2 = y->left;
    y->left = x;
    x->right = T2;
    x->height = 1 + max(height(x->left), height(x->right));
    y->height = 1 + max(height(y->left), height(y->right));
    return y;
}
int getBalance(struct Node* node) 
{
    if (node == NULL)
        return 0;
    return height(node->left) - height(node->right);
}
struct Node* insert(struct Node* node, int data) 
{
    if (node == NULL)
        return newNode(data);
    if (data < node->data)
        node->left = insert(node->left, data);
    else if (data > node->data)
        node->right = insert(node->right, data);
    else
        return node;
    node->height = 1 + max(height(node->left), height(node->right));
    int balance = getBalance(node);
    if (balance > 1 && data < node->left->data)
        return rightRotate(node);

    if (balance > 1 && data > node->left->data) 
	{
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }
    if (balance < -1 && data > node->right->data)
        return leftRotate(node);
    if (balance < -1 && data < node->right->data) 
	{
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }

    return node;
}
void push(struct StackNode** stack, char operation, int value) 
{
    struct StackNode* newNode = (struct StackNode*)malloc(sizeof(struct StackNode));
    newNode->operation = operation;
    newNode->value = value;
    newNode->next = *stack;
    *stack = newNode;
}
void pop(struct StackNode** stack) 
{
    if (*stack == NULL)
        return;

    struct StackNode* temp = *stack;
    *stack = (*stack)->next;
    free(temp);
}
struct Node* minValueNode(struct Node* node) 
{
    struct Node* current = node;
    while (current->left != NULL)
        current = current->left;
    return current;
}
struct Node* deleteNode(struct Node* root, int data) 
{
    if (root == NULL)
        return root;
    if (data < root->data)
        root->left = deleteNode(root->left, data);
    else if (data > root->data)
        root->right = deleteNode(root->right, data);
    else {
        if ((root->left == NULL) || (root->right == NULL)) 
		{
            struct Node* temp = root->left ? root->left : root->right;

            if (temp == NULL) 
			{
                temp = root;
                root = NULL;
            } 
			else
                *root = *temp;

            free(temp);
        } 
		else 
		{
            struct Node* temp = minValueNode(root->right);
            root->data = temp->data;
            root->right = deleteNode(root->right, temp->data);
        }
    }
    if (root == NULL)
        return root;
    root->height = 1 + max(height(root->left), height(root->right));
    int balance = getBalance(root);
    if (balance > 1 && getBalance(root->left) >= 0)
        return rightRotate(root);

    if (balance > 1 && getBalance(root->left) < 0) 
	{
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }
    if (balance < -1 && getBalance(root->right) <= 0)
        return leftRotate(root);
    if (balance < -1 && getBalance(root->right) > 0) 
	{
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }
    return root;
}
void undo(struct Node** avlRoot, struct StackNode** stack) 
{
    if (*stack == NULL) 
	{
        printf("Nothing to undo.\n");
        return;
    }
    struct StackNode* top = *stack;
    char operation = top->operation;
    int value = top->value;
    pop(stack);
    if (operation == 'i') 
	{
        *avlRoot = deleteNode(*avlRoot, value);
    } 
	else if (operation == 'd') 
	{
        *avlRoot = insert(*avlRoot, value);
    }
}
void inOrderTraversal(struct Node* root) 
{
    if (root != NULL) 
	{
        inOrderTraversal(root->left);
        printf("%d ", root->data);
        inOrderTraversal(root->right);
    }
}
void displayStack(struct StackNode* stack) 
{
    printf("Stack: ");
    while (stack != NULL) 
	{
        printf("(%c, %d) ", stack->operation, stack->value);
        stack = stack->next;
    }
    printf("\n");
}
int main() 
{
    struct Node* avlRoot = NULL;
    struct StackNode* stack = NULL;
    int choice, value;

    while (1) 
	{
        printf("\n1. Insert\n2. Delete\n3. Undo\n4. Display AVL Tree\n5. Display Stack\n6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) 
		{
            case 1:
                printf("Enter value to insert: ");
                scanf("%d", &value);
                avlRoot = insert(avlRoot, value);
                push(&stack, 'i', value);
                break;

            case 2:
                printf("Enter value to delete: ");
                scanf("%d", &value);
                avlRoot = deleteNode(avlRoot, value);
                push(&stack, 'd', value);
                break;

            case 3:
                undo(&avlRoot, &stack);
                break;

            case 4:
                printf("AVL Tree: ");
                inOrderTraversal(avlRoot);
                printf("\n");
                break;

            case 5:
                displayStack(stack);
                break;

            case 6:
                exit(0);

            default:
                printf("Invalid choice. Please try again.\n");
        }
    }
    return 0;
}
